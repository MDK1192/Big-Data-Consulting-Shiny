#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(xts)
library(zoo)
library(quantmod)
library(dplyr)
# library(Quandl)
library(forecast)
#library(RCrawler)
library(DT)
library(rvest)
library(readxl)
library(writexl)
library(data.table)
library(switchcase)

#hallotest
#faulty package disables functions -> investigate!
# library(data.table)
# library(imputeTS)
# library(tsibble)
# library(TTR)


ui <- dashboardPage(
    #Header Content
    dashboardHeader(title = "SRE"),
    #Sidebar Content
    dashboardSidebar(
        sidebarMenu(
            menuItem("Aktien", tabName = "aktien", icon = icon("th")),
            menuItem("Forecast", tabName = "forecast", icon = icon("th")),
            menuItem("Blogs", tabName = "blogs", icon = icon("th")),
            menuItem("Kursindikator", tabName = "kursindikator", icon = icon("th")),
            menuItem("Recommendation", tabName = "recommendation", icon = icon("th"))
        )
    ),
    #Body Content
    dashboardBody(
        tabItems(
            tabItem(tabName = "aktien",
                    h2("Aktien Uebersicht"),
                    box(width = 12,
                        box(width = 3, dateRangeInput("dates", label = h3("Date range"))),
                        box(width = 6,radioButtons("branchen", label = h3("Branchen"),
                                                   choices = list("Infrakstruktur" = 1, "Finanzen" = 2, "Technologie" = 3,
                                                                  "Chemie" = 4, "Gesundheitswesen" = 5, "Konsumgueter" = 6,
                                                                  "Immobilien" = 7, "Fahrzeugindustrie" = 8, "Rohstoffe" = 9,
                                                                  "Sonstige" = 10), selected = 1)),
                        box(width = 3, actionButton("loadButton", label = "Load Stockdata", width = '100%'))
                    ),
                    box(width = 12,
                        box(width = 8,plotlyOutput("plotStock"),title = "Kursuebersicht grafisch"),
                        box(width = 4,DTOutput("stockOverview"),title = "Aktienuebersicht")
                    ),
                    box(width = 12, DTOutput("stockData"),title = "Kursuebersicht tabellarisch")
            ),
            tabItem(tabName = "forecast",
                    h2("Forecast"),
                    box(width = 12,
                        box(width = 8,
                            sliderInput("horizonslider", label = h3("Forecast Horizon"), min = 31, max = 365, value = 50),
                            sliderInput("trainslider", label = h3("Forecast Validation window"), min = 0, max = 30, value = 0),
                        ),
                        box(width = 4,DTOutput("stockOverviewFC"),title = "Aktienuebersicht")),
                    box(width = 12, plotlyOutput("plotforecast"),title = "Forecasts grafisch"),
                    box(width = 12,DTOutput("accuracyOverview"),title = "Fehlerausgabe")
            ),
            tabItem(tabName = "blogs",
                    h2("Recommendation"),
                    box(width = 12,
                        box(width = 8,
                            DTOutput("performanceTable"),
                            DTOutput("analystTable"),
                            title = "Performance  Empfehlungen"),
                        box(width = 4,DTOutput("stockOverviewBlog"),title = "Aktienuebersicht")),
                    box(width = 12,DTOutput("newsTable"),title = "Boersenblog Nachrichten")
            ),
            tabItem(tabName = "kursindikator",
                    h2("Kursindikatoren"),
                    box(width = 12,DTOutput("stockOverviewInd"),title = "Aktienuebersicht"),
                    box(width = 12, plotlyOutput("plotIndCore", height = 250)),
                    box(width = 12, 
                        plotlyOutput("plotIndAROON", height = 200),
                        plotlyOutput("plotIndCCI", height = 200),
                        plotlyOutput("plotIndBBands", height = 200),
                        plotlyOutput("plotIndMACD", height = 200),
                        plotlyOutput("plotIndRSI", height = 200)),
            ),
            tabItem(tabName = "recommendation",
                    h2("Recommendation"),
                    box(width = 12,
                        box(width = 6,actionButton("recommendButton", label = "Recommend Stock", width = '100%')),
                        box(width = 6,actionButton("saveButton", label = "Save Recommendation", width = '100%'))
                    ),
                    box(width = 12,DTOutput("recommendationOverview"),title = "Recommendation Overview")
            )
            
        )
    )
)

#server/logic content
server <- function(input, output, session) {
    
    
    #code for importing data
    observeEvent(input$loadButton, {
        
        #read symbol_data
        Stock_Data <<- read_excel("Stock_Data.xlsx", col_names =T, col_types = c("text","text","text"))
        Stock_Data <<- na.omit(Stock_Data)
        #adding symbold from different areas
        symbols_fields <<- list(
          Infrakstruktur <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Infrakstruktur"]),
          Finanzen <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Finanzen"]),
          Technologie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Technologie"]),
          Chemie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Chemie"]),
          Gesundheitswesen <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Gesundheitswesen"]),
          Konsumgueter <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "KonsumgÃ¼ter"]),
          Immobilien <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Immobilien"]),
          Fahrzeugindustrie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Fahrzeugindustrie"]),
          Rohstoffe <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Rohstoffe"]),
          Sonstige <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Sonstige"])
        )
        
        #symbols_Nasdaq <- stockSymbols("NASDAQ")[,c(1:2)]
        #symbols_Nasdaq <- read_excel("GitHub/Stock_Forecast_Recommendation_Tool/symbols_Nasdaq.xlsx")
        symbols_Nasdaq <- read_excel("symbols_Nasdaq.xlsx")
        symbols_Nasdaq <- na.omit(symbols_Nasdaq)
        symbols_choice <- symbols_fields[[as.numeric(input$branchen)]]
        symbols <- symbols_Nasdaq[symbols_Nasdaq$Symbol %in% symbols_choice,]
        
        if(input$dates[1] == input$dates[2]){
            for (i in 1:length(symbols$Symbol)){
                try(getSymbols(symbols$Symbol[i], from = "2017-12-31", to=as.character(Sys.Date()) ,auto.assign = T))}
        }
        else{
            for (i in 1:length(symbols$Symbol)){
                try(getSymbols(symbols$Symbol[i], from = as.character(input$dates[1]), to=as.character(input$dates[2]) ,auto.assign = T))}
        }
        data_stock <- get(objects()[objects() %in% symbols_choice[1]])
        stocks_picked <<- symbols_Nasdaq[symbols_Nasdaq$Symbol %in% objects(),]
        
        output$stockOverview <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
        output$stockOverviewFC <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
        output$stockOverviewInd <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
        output$stockOverviewBlog <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
        data_stock_overview <- as.data.frame(data_stock)
        output$stockData <- renderDataTable(data_stock_overview,options= list(scrollY = TRUE,pageLength = 5))
        output$plotStock <- renderPlotly({
            data_plot <- data.frame("Date"= index(data_stock), "Adjusted" = select(as.data.frame(data_stock),contains("Adjusted")))
            names(data_plot) <- c("Date", "Adjusted")
            plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines', 
                    line = list(color = "rgb(0, 0, 0)")) %>%
                layout(xaxis = list(title = "Date",
                                    zeroline = FALSE),
                       yaxis = list(title = "Price",
                                    zeroline = FALSE))
        })
        #export everything to global env.
        allglobal <- function() {
            lss <- ls(envir = parent.frame())
            for (i in lss) {
                assign(i, get(i, envir = parent.frame()), envir = .GlobalEnv)
            }
        }
        allglobal()
    })
    #code for landing page tab
    observeEvent(input$stockOverview_rows_selected, {
        if (stocks_picked$Symbol[input$stockOverview_rows_selected] %in% ls(envir = .GlobalEnv)) {
            data_stock <<- get(stocks_picked$Symbol[input$stockOverview_rows_selected], envir = .GlobalEnv)
            data_stock_overview <- as.data.frame(data_stock)
            output$stockData <- renderDataTable(data_stock_overview,options= list(scrollY = TRUE,pageLength = 5))
            output$plotStock <- renderPlotly({
                data_plot <- data.frame("Date"= index(data_stock), "Adjusted" = select(as.data.frame(data_stock),contains("Adjusted")))
                names(data_plot) <- c("Date", "Adjusted")
                plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines', 
                        line = list(color = "rgb(0, 0, 0)")) %>%
                    layout(xaxis = list(title = "Date",
                                        zeroline = FALSE),
                           yaxis = list(title = "Price",
                                        zeroline = FALSE))
            })
        } 
    })
    #code for forecast tab
    observeEvent(input$stockOverviewFC_rows_selected, {
        if (stocks_picked$Symbol[input$stockOverviewFC_rows_selected] %in% ls(envir = .GlobalEnv)) {
            data_stock <<- get(stocks_picked$Symbol[input$stockOverviewFC_rows_selected], envir = .GlobalEnv)
            output$plotforecast <- renderPlotly({
                data_fc  <- xts(x=data_stock)
                
                dates <- seq.Date(from=min(index(data_fc)), to=max(index(data_fc)) - input$trainslider, by="days")
                xts <- xts(x=rep(NA, length(dates)), order.by=dates)
                data_fc_train <- na.locf(merge(xts, data_fc, join = "left"))
                
                dates <- seq.Date(from=min(index(data_fc)), to=max(index(data_fc)), by="days")
                xts <- xts(x=rep(NA, length(dates)), order.by=dates)
                data_fc <- na.locf(merge(xts, data_fc, join = "left"))
                
                
                fc_meanf <- meanf(data_fc_train[,7],h=input$horizonslider)$mean
                fc_naive <- naive(data_fc_train[,7],h=input$horizonslider)$mean
                fc_snaive <- snaive(data_fc_train[,7],h=input$horizonslider)$mean
                fc_rwf <- rwf(data_fc_train[,7],h=input$horizonslider)$mean
                # #fc_croston <- croston(data_fc_train[,7],h=input$horizonslider)$mean
                # only for seas.
                # #fc_stlf <- stlf(data_fc_train[,7],h=input$horizonslider)$mean
                fc_ses <- ses(data_fc_train[,7],h=input$horizonslider)$mean
                fc_holt <- holt(data_fc_train[,7],h=input$horizonslider)$mean
                # #fc_hw <- hw(data_fc_train[,7],h=input$horizonslider)$mean
                fc_splinef <- splinef(data_fc_train[,7],h=input$horizonslider)$mean
                fc_thetaf <- thetaf(data_fc_train[,7],h=input$horizonslider)$mean
                fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider) 
                fc_ets <- fc_ets$mean
                fc_tbats <- tbats(as.numeric(data_fc_train[,7])) %>% forecast(h = input$horizonslider)
                fc_tbats <- fc_tbats$mean
                fc_arima <- auto.arima(data_fc_train[,7]) %>% forecast(h = input$horizonslider)
                fc_arima <- fc_arima$mean
                fc_nnetar <- nnetar(data_fc_train[,7], lambda=0) %>% forecast(h = input$horizonslider)
                fc_nnetar <- fc_nnetar$mean
                
                if(input$trainslider != 0){
                    train_ts <- anti_join(as.data.frame(data_fc), as.data.frame(data_fc_train))
                    acc_fc_meanf <- accuracy(fc_meanf[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_naive <- accuracy(fc_naive[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_snaive <- accuracy(fc_snaive[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_rwf <- accuracy(fc_rwf[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_ses <- accuracy(fc_ses[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_holt <- accuracy(fc_holt[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_splinef <- accuracy(fc_splinef[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_thetaf <- accuracy(fc_thetaf[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_ets <- accuracy(fc_ets[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_tbats <- accuracy(fc_tbats[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_arima <- accuracy(fc_arima[1:length(train_ts[,7])], train_ts[,7])
                    acc_fc_nnetar <- accuracy(fc_nnetar[1:length(train_ts[,7])], train_ts[,7])
                    acc_df <- as.data.frame(rbind(acc_fc_meanf, acc_fc_naive, acc_fc_snaive, acc_fc_rwf, acc_fc_ses, 
                                                  acc_fc_holt, acc_fc_splinef, acc_fc_thetaf, acc_fc_ets, acc_fc_tbats,
                                                  acc_fc_arima, acc_fc_nnetar))
                    row.names(acc_df) <- c("meanf", "naive", "snaive", "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "arima", "nnetar")
                    output$accuracyOverview <- renderDataTable(acc_df, options= list(scrollY = TRUE,pageLength = 5))
                    #Build FC_Ensemble
                    top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])
                    models <- row.names(top_scores_RMSE[1:3,])
                    multiplier <- c(0.5, 0.3, 0.2)
                    ensemble_fc <- rep(0,1,length(fc_meanf))
                    for(i in 1: length(multiplier)){
                        model_fc <- as.numeric(get(paste0("fc_",models[i])))
                        model_fc_weighted <- model_fc * multiplier[i]
                        ensemble_fc <- ensemble_fc + model_fc_weighted
                    }
                }
                
                dates <- seq.Date(from=max(index(data_fc_train)) + 1, to=max(index(data_fc_train)) + input$horizonslider, by="days")
                fc_meanf_xts <- xts(x=fc_meanf, order.by=dates)
                fc_naive_xts <- xts(x=fc_naive, order.by=dates)
                fc_snaive_xts <- xts(x=fc_snaive, order.by=dates)
                fc_rwf_xts <- xts(x=fc_rwf, order.by=dates)
                #fc_croston_xts <- xts(x=fc_croston, order.by=dates)
                #fc_stlf_xts <- xts(x=fc_stlf, order.by=dates)
                fc_ses_xts <- xts(x=fc_ses, order.by=dates)
                fc_holt_xts <- xts(x=fc_holt, order.by=dates)
                # #fc_hw_xts <- xts(x=fc_hw, order.by=dates)
                fc_splinef_xts <- xts(x=fc_splinef, order.by=dates)
                fc_thetaf_xts <- xts(x=fc_thetaf, order.by=dates)
                fc_ets_xts <- xts(x=fc_ets, order.by=dates)
                fc_tbats_xts <- xts(x=fc_tbats, order.by=dates)
                fc_arima_xts <- xts(x=fc_arima, order.by=dates)
                fc_nnetar_xts <- xts(x=fc_nnetar, order.by=dates)
                
                trace_0 <- data.frame(date=index(data_fc_train), coredata(data_fc_train[,7]))
                if(input$trainslider != 0){
                    trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,7]))
                    trace_train <- anti_join(trace_train, trace_0)
                    trace_ensemble <- data.frame(date=index(fc_meanf_xts), ensemble_fc)
                }
                trace_1 <- data.frame(date=index(fc_meanf_xts), coredata(fc_meanf_xts))
                trace_2 <- data.frame(date=index(fc_naive_xts), coredata(fc_naive_xts))
                trace_3 <- data.frame(date=index(fc_snaive_xts), coredata(fc_snaive_xts))
                trace_4 <- data.frame(date=index(fc_rwf_xts), coredata(fc_rwf_xts))
                #trace_5 <- data.frame(date=index(fc_croston_xts), coredata(fc_croston_xts))
                #trace_6 <- data.frame(date=index(fc_stlf_xts), coredata(fc_stlf_xts))
                trace_7 <- data.frame(date=index(fc_ses_xts), coredata(fc_ses_xts))
                trace_8 <- data.frame(date=index(fc_holt_xts), coredata(fc_holt_xts))
                # #trace_9 <- data.frame(date=index(fc_hw_xts), coredata(fc_hw_xts))
                trace_10 <- data.frame(date=index(fc_splinef_xts), coredata(fc_splinef_xts))
                trace_11 <- data.frame(date=index(fc_thetaf_xts), coredata(fc_thetaf_xts))
                trace_12 <- data.frame(date=index(fc_ets_xts), coredata(fc_ets_xts))
                trace_13 <- data.frame(date=index(fc_tbats_xts), coredata(fc_tbats_xts))
                trace_14 <- data.frame(date=index(fc_arima_xts), coredata(fc_arima_xts))
                trace_15 <- data.frame(date=index(fc_nnetar_xts), coredata(fc_nnetar_xts))
                
                x <- seq.Date(from=min(index(data_fc)), to=max(index(fc_meanf_xts)), by="days")
                data_fc_merged <- data.frame("date"=x)
                data_fc_merged <- merge(data_fc_merged, trace_0, by="date", all.x = TRUE)
                if(input$trainslider != 0){
                    data_fc_merged <- merge(data_fc_merged, trace_train, by="date", all.x = TRUE)
                    data_fc_merged <- merge(data_fc_merged, trace_ensemble, by="date", all.x = TRUE)
                }
                data_fc_merged <- merge(data_fc_merged, trace_1, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_2, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_3, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_4, by="date", all.x = TRUE)
                #data_fc_merged <- merge(data_fc_merged, trace_5, by="date", all.x = TRUE)
                #data_fc_merged <- merge(data_fc_merged, trace_6, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_7, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_8, by="date", all.x = TRUE)
                # #data_fc_merged <- merge(data_fc_merged, trace_9, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_10, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_11, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_12, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_13, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_14, by="date", all.x = TRUE)
                data_fc_merged <- merge(data_fc_merged, trace_15, by="date", all.x = TRUE)
                
                #"stlf",
                #"croston","hw","ses", "holt", 
                #"splinef","thetaf","ets", "tbats", "autoarima"
                if(input$trainslider != 0){
                    names(data_fc_merged) <- c("date", "Price", "Price_Validation", "Ensemble_FC", "meanf", "naive", "snaive", 
                                               "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "arima", "nnetar")}
                else{
                    names(data_fc_merged) <- c("date", "Price", "meanf", "naive", "snaive", 
                                               "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "arima", "nnetar")
                }
                
                fig <- plot_ly(data_fc_merged, x=~date, y = ~Price, name = 'Price', type = 'scatter', mode = 'lines')
                if(input$trainslider != 0){
                    fig <- fig %>% add_trace(y = ~Price_Validation, name = 'Price_Validation', mode = 'lines')
                    fig <- fig %>% add_trace(y = ~Ensemble_FC, name = 'Ensemble_FC', mode = 'lines')
                }
                fig <- fig %>% add_trace(y = ~meanf, name = 'meanf', mode = 'lines')
                fig <- fig %>% add_trace(y = ~naive, name = 'naive', mode = 'lines')
                fig <- fig %>% add_trace(y = ~snaive, name = 'snaive', mode = 'lines')
                fig <- fig %>% add_trace(y = ~rwf, name = 'rwf', mode = 'lines')
                fig <- fig %>% add_trace(y = ~ses, name = 'ses', mode = 'lines')
                fig <- fig %>% add_trace(y = ~holt, name = 'holt', mode = 'lines')
                fig <- fig %>% add_trace(y = ~splinef, name = 'splinef', mode = 'lines')
                fig <- fig %>% add_trace(y = ~thetaf, name = 'thetaf', mode = 'lines')
                fig <- fig %>% add_trace(y = ~ets, name = 'ets', mode = 'lines')
                fig <- fig %>% add_trace(y = ~tbats, name = 'tbats', mode = 'lines')
                fig <- fig %>% add_trace(y = ~arima, name = 'arima', mode = 'lines')
                fig <- fig %>% add_trace(y = ~nnetar, name = 'nnetar', mode = 'lines')
                fig
                browser()
            })
        } 
    })
    #code for indicator tab
    observeEvent(input$stockOverviewInd_rows_selected, {
        if (stocks_picked$Symbol[input$stockOverviewInd_rows_selected] %in% ls(envir = .GlobalEnv)) {
            data_stock <<- get(stocks_picked$Symbol[input$stockOverviewInd_rows_selected], envir = .GlobalEnv)
            data_plot <- data.frame("Date"= index(data_stock), "Adjusted" = select(as.data.frame(data_stock),contains("Adjusted")))
            names(data_plot) <- c("Date", "Adjusted")

            try(data_plot$CCI <- as.vector(CCI(data_plot$Adjusted)))
            try(data_plot$AROON_UP <- aroon(data_plot$Adjusted)[,1])
            try(data_plot$AROON_DOWN <- aroon(data_plot$Adjusted)[,2])
            try(data_plot$AROON_OSCILLITATOR <- aroon(data_plot$Adjusted)[,3])
            try(data_plot$BB_DOWN <- BBands(data_plot$Adjusted)[,1])
            try(data_plot$BB_AVG <- BBands(data_plot$Adjusted)[,2])
            try(data_plot$BB_UP <- BBands(data_plot$Adjusted)[,3])
            try(data_plot$RSI <- RSI(data_plot$Adjusted))
            try(data_plot$MACD <- MACD(data_plot$Adjusted)[,1])
            try(data_plot$MACD_Signal <- MACD(data_plot$Adjusted)[,2])
            
            names(data_plot) <- c("Date", "Adjusted", "CCI", "AROON_UP", "AROON_DOWN","AROON_OSCILLITATOR", "BB_DOWN", "BB_AVG", "BB_UP", "RSI", "MACD", "MACD_Signal")
            
            output$plotIndCore <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines', 
                                                        line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Overview", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
            # plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines', 
            #                                              line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
            output$plotIndAROON <- renderPlotly({
                fig <- plot_ly(data_plot, x=~Date, y = ~AROON_UP, name = 'AROON_UP', type = 'scatter', mode = 'lines')
                fig <- fig %>% add_trace(y = ~AROON_DOWN, name = 'AROON_DOWN', mode = 'lines')
                fig <- fig %>% add_trace(y = ~AROON_OSCILLITATOR, name = 'AROON_OSCILLITATOR', mode = 'lines')
                fig
                
            })
            output$plotIndBBands <- renderPlotly({
                fig <- plot_ly(data_plot, x=~Date, y = ~BB_DOWN, name = 'BB_DOWN', type = 'scatter', mode = 'lines')
                fig <- fig %>% add_trace(y = ~BB_AVG, name = 'BB_AVG', mode = 'lines')
                fig <- fig %>% add_trace(y = ~BB_UP, name = 'BB_UP', mode = 'lines')
                fig
                
            })
            
            output$plotIndCCI <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines',
                                                       line = list(color = "rgb(0, 0, 0)")) %>% layout(xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "CCI", zeroline = FALSE))})
            
            output$plotIndRSI <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~RSI,type = 'scatter', mode = 'lines',
                                                       line = list(color = "rgb(0, 0, 0)")) %>% layout(xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "RSI", zeroline = FALSE))})
            
            output$plotIndMACD <- renderPlotly({
                fig <- plot_ly(data_plot, x=~Date, y = ~MACD, name = 'MACD', type = 'scatter', mode = 'lines')
                fig <- fig %>% add_trace(y = ~MACD_Signal, name = 'MACD_Signal', mode = 'lines')
                fig
                
            })
            
        } 
    })
    #code for blog tab
    observeEvent(input$stockOverviewBlog_rows_selected,{
        Stock_Data <- get("Stock_Data", envir = .GlobalEnv)
        active_stock <- tolower(Stock_Data$Name[Stock_Data$Symbol %in% stocks_picked$Symbol[input$stockOverviewBlog_rows_selected]])
        active_stock <- gsub(" group", "",active_stock)
        active_stock <- gsub(" ", "_",active_stock)
        if (stocks_picked$Symbol[input$stockOverviewBlog_rows_selected] %in% ls(envir = .GlobalEnv)) {
            data_stock <<- get(stocks_picked$Symbol[input$stockOverviewBlog_rows_selected], envir = .GlobalEnv)
            address_performance <- paste0("https://www.marketwatch.com/investing/stock/",tolower(stocks_picked$Symbol[input$stockOverviewBlog_rows_selected]))
            address_analyst <- paste0("https://www.marketwatch.com/investing/stock/", tolower(stocks_picked$Symbol[input$stockOverviewBlog_rows_selected]), "/analystestimates?mod=mw_quote_analyst")
            performance <- read_html(address_performance) %>%
                html_nodes(".right, .value") %>%
                html_text()
            analyst_opinions <- read_html(address_analyst) %>%
                html_nodes(".analyst-ratings, .value") %>%
                html_text()
            expert_opinions <- data.frame(Buy=analyst_opinions[11], Overweight=analyst_opinions[14],Hold=analyst_opinions[17], Underweight=analyst_opinions[20], Sell=analyst_opinions[23])
            df_performance <- data.frame("5 Day" = performance[9], "1 Month" = performance[10], "3 Month" = performance[11], "YTD" = performance[12], "1 Year" =performance[13])
            names(df_performance) <- c("5 Day", "1 Month", "3 Month", "YTD", "1 Year")
            output$performanceTable <- renderDataTable(df_performance,options= list(scrollY = TRUE,pageLength = 5))
            output$analystTable <- renderDataTable(expert_opinions,options= list(scrollY = TRUE,pageLength = 5))
            output$newsTable <- renderDataTable({
                url <- paste0("https://www.finanzen.net/news/", active_stock,"-news")
                #urls <- read_html("https://www.finanzen.net/news/bayer-news") %>%
                urls <- read_html(url) %>%
                    html_nodes("td a") %>%
                    html_attr("href")
                blog_df <- data.frame(Teaser = "Placeholder", Url = urls[urls %like% "/nachricht/aktien/"])
                blog_df$Url <- as.character(blog_df$Url)
                blog_df <- distinct(blog_df, Url,.keep_all = FALSE)
                blog_df$Teaser <- "Placeholder"
                n <- 15
                if(nrow(blog_df) < 15){n <- nrow(blog_df)}
                for(i in c(1:n)){
                    try(blog_df$Url[i] <- as.character(paste0("https://www.finanzen.net",blog_df$Url[i])))
                    try(blog_df$Teaser[i] <- read_html(blog_df$Url[i]) %>%
                            html_node(".teaser-snapshot") %>%
                            html_text())
                    try(len <- strsplit(blog_df$Teaser[i], " -W-"))
                    if(length(len[[1]]) > 1){
                        strsplit(blog_df$Teaser[i], " -W-")
                        blog_df$Teaser[i] <- strsplit(blog_df$Teaser[i], " -W-")[[1]][length(strsplit(blog_df$Teaser[i], " -W-")[[1]])]
                    }
                    else(blog_df$Teaser[i] <- NA)
                }
                
                createLink <- function(val) {
                    sprintf('<a href="https://www.google.com/#q=%s" target="_blank" class="btn btn-primary">Info</a>',val)
                }
                blog_df$Teaser[blog_df$Teaser == "Placeholder"] <- NA
                blog_df <- na.omit(blog_df)
                if(nrow(blog_df)>0){
                    blog_df <- blog_df[c(1:nrow(blog_df)),]
                    rownames(blog_df) <- 1:nrow(blog_df)
                    blog_df$Url <- createLink(blog_df$Url)
                }
                else(blog_df <- data.frame(Status="No data found"))
                return(blog_df)
            }, escape = FALSE)
            
        } 
    })
    #code for recommend tab
    observeEvent(input$recommendButton, {
        
        #"Performance"= as.character(),"Buy"= as.character(),"Overweight"= as.character(),"Hold"= as.character(),
        #"Underweight"= as.character(),"Sell"= as.character(),
        
        data_events <<- data.frame("Name"= as.character(),"Symbol"= as.character(),"Date"= as.character(),"Adjusted"= as.character(),"Buy"= as.character(), "Overweight"= as.character(), "Hold"= as.character(),
                                   "Underweight"= as.character(), "Sell"= as.character(),
                                  "Volume1"= as.character(), "Volume2"= as.character(), "Volume3"= as.character(), "Volume4"= as.character(),
                                   "Volume5"= as.character(), "Volume6"= as.character(), "Volume7"= as.character(), "Volume8"= as.character(),
                                   "Volume9"= as.character(), "Volume10"= as.character(), "Volume11"= as.character(), "Volume12"= as.character(),
                                   "Volume13"= as.character(), "Volume14"= as.character(), "Volume15"= as.character(), "Volume16"= as.character(),
                                   "Volume17"= as.character(), "Volume18"= as.character(), "Volume19"= as.character(), "Volume20"= as.character(), 
                                   "Volume21"= as.character(), "Volume22"= as.character(), "Volume23"= as.character(), "Volume24"= as.character(), 
                                   "Adjusted1"= as.character(), "Adjusted2"= as.character(), "Adjusted3"= as.character(), "Adjusted4"= as.character(),
                                   "Adjusted5"= as.character(), "Adjusted6"= as.character(), "Adjusted7"= as.character(), "Adjusted8"= as.character(),
                                   "Adjusted9"= as.character(), "Adjusted10"= as.character(), "Adjusted11"= as.character(), "Adjusted12"= as.character(),
                                   "Adjusted13"= as.character(), "Adjusted14"= as.character(), "Adjusted15"= as.character(), "Adjusted16"= as.character(),
                                   "Adjusted17"= as.character(), "Adjusted18"= as.character(), "Adjusted19"= as.character(), "Adjusted20"= as.character(), 
                                   "Adjusted21"= as.character(), "Adjusted22"= as.character(), "Adjusted23"= as.character(), "Adjusted24"= as.character(), 
                                   "AROON_UP7"= as.character(), "AROON_DOWN7"= as.character(),"AROON_OSCILLITATOR7"= as.character(),
                                   "AROON_UP6"= as.character(), "AROON_DOWN6"= as.character(),"AROON_OSCILLITATOR6"= as.character(),
                                   "AROON_UP5"= as.character(), "AROON_DOWN5"= as.character(),"AROON_OSCILLITATOR5"= as.character(),
                                   "AROON_UP4"= as.character(), "AROON_DOWN4"= as.character(),"AROON_OSCILLITATOR4"= as.character(),
                                   "AROON_UP3"= as.character(), "AROON_DOWN3"= as.character(),"AROON_OSCILLITATOR3"= as.character(),
                                   "AROON_UP2"= as.character(), "AROON_DOWN2"= as.character(),"AROON_OSCILLITATOR2"= as.character(),
                                   "AROON_UP1"= as.character(), "AROON_DOWN1"= as.character(),"AROON_OSCILLITATOR1"= as.character(),
                                   "AROON_UP"= as.character(), "AROON_DOWN"= as.character(),"AROON_OSCILLITATOR"= as.character(),
                                  "RSI7"= as.character(), "MACD7"= as.character(),"MACD_Signal7"= as.character(),
                                  "RSI6"= as.character(), "MACD6"= as.character(),"MACD_Signal6"= as.character(),
                                  "RSI5"= as.character(), "MACD5"= as.character(),"MACD_Signal5"= as.character(),
                                  "RSI4"= as.character(), "MACD4"= as.character(),"MACD_Signal4"= as.character(),
                                  "RSI3"= as.character(), "MACD3"= as.character(),"MACD_Signal3"= as.character(),
                                  "RSI2"= as.character(), "MACD2"= as.character(),"MACD_Signal2"= as.character(),
                                  "RSI1"= as.character(), "MACD1"= as.character(),"MACD_Signal1"= as.character(),
                                  "RSI"= as.character(), "MACD"= as.character(),"MACD_Signal"= as.character())
        
        
        
        Stock_Data <<- read_excel("Stock_Data.xlsx", col_names =T, col_types = c("text","text","text"))
        Stock_Data <<- na.omit(Stock_Data)
        
        symbols_fields <<- list(
            Infrakstruktur <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Infrakstruktur"]),
            Finanzen <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Finanzen"]),
            Technologie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Technologie"]),
            Chemie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Chemie"]),
            Gesundheitswesen <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Gesundheitswesen"]),
            Konsumgueter <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "KonsumgÃ¼ter"]),
            Immobilien <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Immobilien"]),
            Fahrzeugindustrie <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Fahrzeugindustrie"]),
            Rohstoffe <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Rohstoffe"]),
            Sonstige <- as.vector(Stock_Data$Symbol[Stock_Data$Branche == "Sonstige"])
        )
        
        
        stocks_recommendation <- data.frame("Stock" = as.character(),"Symbol" = as.character(), "Forecast"= as.character(), "Indicator"= as.character(), "Expert_Opinion"= as.character(), "Performance"= as.character(), "Total"=as.character())
        for(i in 1:length(symbols_fields)){
            #load stocks after symbols
            symbols_Nasdaq <- read_excel("symbols_Nasdaq.xlsx")
            symbols_Nasdaq <- na.omit(symbols_Nasdaq)
            symbols_choice <- symbols_fields[[i]]
            symbols <- symbols_Nasdaq[symbols_Nasdaq$Symbol %in% symbols_choice,]
            if(input$dates[1] == input$dates[2]){
                for (j in 1:length(symbols$Symbol)){
                    try(getSymbols(symbols$Symbol[j], from = "2010-12-31", to=as.character(Sys.Date()) ,auto.assign = T))}
            }
            else{
                for (j in 1:length(symbols$Symbol)){
                    try(getSymbols(symbols$Symbol[j], from = as.character(input$dates[1]), to=as.character(input$dates[2]) ,auto.assign = T))}
            }
            try(for(k in 1:nrow(symbols)){
                last_l <<- 1
                current_stock <- as.character(symbols$Name[k])
                current_symbol <- as.character(symbols$Symbol[k])
                data_stock_recommend <- get(objects()[objects() %in% symbols_choice[k]])
                
                #expert & performance evaluation
                #address_performance <- paste0("https://www.marketwatch.com/investing/stock/",tolower(symbols_choice[k]))
                address_analyst <- paste0("https://www.marketwatch.com/investing/stock/", tolower(symbols_choice[k]), "/analystestimates?mod=mw_quote_analyst")
                # performance <- read_html(address_performance) %>%
                #     html_nodes(".right, .value") %>%
                #     html_text()
                analyst_opinions <- read_html(address_analyst) %>%
                    html_nodes(".analyst-ratings, .value") %>%
                    html_text()
                expert_opinions <- data.frame(Buy=analyst_opinions[11], Overweight=analyst_opinions[14],Hold=analyst_opinions[17], Underweight=analyst_opinions[20], Sell=analyst_opinions[23])
                #df_performance <- data.frame("5 Day" = performance[9], "1 Month" = performance[10], "3 Month" = performance[11], "YTD" = performance[12], "1 Year" =performance[13])
                # names(df_performance) <- c("5 Day", "1 Month", "3 Month", "YTD", "1 Year")
                # df_performance$`5 Day` = as.numeric(substr(as.character(df_performance$`5 Day`),1,nchar(as.character(df_performance$`5 Day`))-1))
                # df_performance$`1 Month` = as.numeric(substr(as.character(df_performance$`1 Month`),1,nchar(as.character(df_performance$`1 Month`))-1))
                # df_performance$`3 Month` = as.numeric(substr(as.character(df_performance$`3 Month`),1,nchar(as.character(df_performance$`3 Month`))-1))
                # df_performance$`YTD` = as.numeric(substr(as.character(df_performance$`YTD`),1,nchar(as.character(df_performance$`YTD`))-1))
                # df_performance$`1 Year` = as.numeric(substr(as.character(df_performance$`1 Year`),1,nchar(as.character(df_performance$`1 Year`))-1))
                # 
                # current_performance <- df_performance$`1 Year`
                #

                expert_opinions$Buy <- as.character(expert_opinions$Buy)
                expert_opinions$Overweight <- as.character(expert_opinions$Overweight)
                expert_opinions$Hold <- as.character(expert_opinions$Hold)
                expert_opinions$Underweight <- as.character(expert_opinions$Underweight)
                expert_opinions$Sell <- as.character(expert_opinions$Sell)
                
                #indicator evaluation
                data_indicator <- data.frame("Date"= index(data_stock_recommend), "Adjusted" = select(as.data.frame(data_stock_recommend),contains("Adjusted")))
                names(data_indicator) <- c("Date", "Adjusted")
                #try(data_indicator$CCI <- as.vector(CCI(data_indicator$Adjusted)))
                try(data_indicator$AROON_UP <- aroon(data_indicator$Adjusted)[,1])
                try(data_indicator$AROON_DOWN <- aroon(data_indicator$Adjusted)[,2])
                try(data_indicator$AROON_OSCILLITATOR <- aroon(data_indicator$Adjusted)[,3])
                # try(data_indicator$BB_DOWN <- BBands(data_indicator$Adjusted)[,1])
                # try(data_indicator$BB_AVG <- BBands(data_indicator$Adjusted)[,2])
                # try(data_indicator$BB_UP <- BBands(data_indicator$Adjusted)[,3])
                try(data_indicator$RSI <- RSI(data_indicator$Adjusted))
                try(data_indicator$MACD <- MACD(data_indicator$Adjusted)[,1])
                try(data_indicator$MACD_Signal <- MACD(data_indicator$Adjusted)[,2])
                try(names(data_indicator) <- c("Date", "Adjusted", 
                                           #"CCI", 
                                           "AROON_UP", "AROON_DOWN","AROON_OSCILLITATOR",
                                           #"BB_DOWN", "BB_AVG", "BB_UP", 
                                            "RSI", "MACD", "MACD_Signal"))
                
                #data_indicator_xts <- as.xts(data_indicator)
                try(data_stock_recommend_df <- as.data.frame(data_stock_recommend))
                try(data_stock_recommend_df$Date <- data_indicator$Date)
                try(data_joined <- left_join(data_stock_recommend_df, data_indicator, by="Date"))
                try(data_joined <- na.omit(data_joined))
                if(ncol(data_indicator) >= 3){
                    try(
                        for(l in 1:nrow(data_joined)){
                            if((data_joined$AROON_UP[l] >= 90) && ((data_joined$AROON_UP[l-2] <= 10) | (data_joined$AROON_UP[l-3] <= 10) | (data_joined$AROON_UP[l-4]  <= 10))){

                                #if((data_joined$AROON_OSCILLITATOR[l -1] <= 30) && ((data_joined$AROON_OSCILLITATOR[l-3] < -40) | (data_joined$AROON_OSCILLITATOR[l-2] < -40) | (data_joined$AROON_OSCILLITATOR[l-1] < -40))){
                                if((data_joined$AROON_DOWN[l - 7] >= 80) && ((data_joined$AROON_DOWN[l-5] > data_joined$AROON_DOWN[l-4]) && (data_joined$AROON_DOWN[l-4] > data_joined$AROON_DOWN[l-3]) && (data_joined$AROON_DOWN[l-3] > data_joined$AROON_DOWN[l-2]) && (data_joined$AROON_DOWN[l-2] > data_joined$AROON_DOWN[l-1]))){
                                    #if((data_joined$RSI < 70) & (data_joined$RSI > 60)){
                                    #if((data_joined$RSI < 70) && (data_joined$RSI > 50)){
                                       #if((data_joined$Adjusted[l] < 90) && (data_joined$Adjusted[l] > 30)){
                                           #if((data_joined$Adjusted[l] < 70) & (data_joined$Adjusted[l] > 30)){
                                            if(l >=  (last_l + 14)){
                                                last_l <<- l
                                                colnames(data_joined)[5] <- "Volume"
                                                new_row <- data.frame(symbols$Name[k], symbols$Symbol[k],as.Date(data_joined$Date[l]), data_joined$Adjusted[l], expert_opinions$Buy, expert_opinions$Overweight, expert_opinions$Hold,
                                                                      expert_opinions$Underweight, expert_opinions$Sell, data_joined$Volume[l +1],data_joined$Volume[l+2],data_joined$Volume[l+3],data_joined$Volume[l+4],
                                                                      data_joined$Volume[l+5],data_joined$Volume[l+6],data_joined$Volume[l+7],data_joined$Volume[l+8],
                                                                      data_joined$Volume[l+9],data_joined$Volume[l+10],data_joined$Volume[l+11],data_joined$Volume[l+12],
                                                                      data_joined$Volume[l+13],data_joined$Volume[l+14],data_joined$Volume[l+15],data_joined$Volume[l+16],
                                                                      data_joined$Volume[l+17],data_joined$Volume[l+18],data_joined$Volume[l+19],data_joined$Volume[l+20],
                                                                      data_joined$Volume[l+21],data_joined$Volume[l+22],data_joined$Volume[l+23],data_joined$Volume[l+24],
                                                                      data_joined$Adjusted[l +1],data_joined$Adjusted[l+2],data_joined$Adjusted[l+3],data_joined$Adjusted[l+4],
                                                                      data_joined$Adjusted[l +5],data_joined$Adjusted[l+6],data_joined$Adjusted[l+7],data_joined$Adjusted[l+8],
                                                                      data_joined$Adjusted[l+9],data_joined$Adjusted[l+10],data_joined$Adjusted[l+11],data_joined$Adjusted[l+12],
                                                                      data_joined$Adjusted[l+13],data_joined$Adjusted[l+14],data_joined$Adjusted[l+15],data_joined$Adjusted[l+16],
                                                                      data_joined$Adjusted[l+17],data_joined$Adjusted[l+18],data_joined$Adjusted[l+19],data_joined$Adjusted[l+20],
                                                                      data_joined$Adjusted[l+21],data_joined$Adjusted[l+22],data_joined$Adjusted[l+23],data_joined$Adjusted[l+24],
                                                                      data_joined$AROON_UP[l - 7], data_joined$AROON_DOWN[l - 7], data_joined$AROON_OSCILLITATOR[l - 7],
                                                                      data_joined$AROON_UP[l - 6], data_joined$AROON_DOWN[l - 6], data_joined$AROON_OSCILLITATOR[l - 6],
                                                                      data_joined$AROON_UP[l - 5], data_joined$AROON_DOWN[l - 5], data_joined$AROON_OSCILLITATOR[l - 5],
                                                                      data_joined$AROON_UP[l - 4], data_joined$AROON_DOWN[l - 4], data_joined$AROON_OSCILLITATOR[l - 4],
                                                                      data_joined$AROON_UP[l - 3], data_joined$AROON_DOWN[l - 3], data_joined$AROON_OSCILLITATOR[l - 3],
                                                                      data_joined$AROON_UP[l - 2], data_joined$AROON_DOWN[l - 2], data_joined$AROON_OSCILLITATOR[l - 2],
                                                                      data_joined$AROON_UP[l - 1], data_joined$AROON_DOWN[l - 1], data_joined$AROON_OSCILLITATOR[l - 1],
                                                                      data_joined$AROON_UP[l], data_joined$AROON_DOWN[l], data_joined$AROON_OSCILLITATOR[l],
                                                                      data_joined$RSI[l - 7], data_joined$MACD[l - 7], data_joined$MACD_Signal[l - 7],
                                                                      data_joined$RSI[l - 6], data_joined$MACD[l - 6], data_joined$MACD_Signal[l - 6],
                                                                      data_joined$RSI[l - 5], data_joined$MACD[l - 5], data_joined$MACD_Signal[l - 5],
                                                                      data_joined$RSI[l - 4], data_joined$MACD[l - 4], data_joined$MACD_Signal[l - 4],
                                                                      data_joined$RSI[l - 3], data_joined$MACD[l - 3], data_joined$MACD_Signal[l - 3],
                                                                      data_joined$RSI[l - 2], data_joined$MACD[l - 2], data_joined$MACD_Signal[l - 2],
                                                                      data_joined$RSI[l - 1], data_joined$MACD[l - 1], data_joined$MACD_Signal[l - 1],
                                                                      data_joined$RSI[l], data_joined$MACD[l], data_joined$MACD_Signal[l])
                                                data_events <- get("data_events", envir = .GlobalEnv)
                                                
                                                for(m in 1:ncol(data_events)){
                                                    if(m != 3){
                                                        data_events[,m] <- as.character(data_events[,m])
                                                    }
                                                    else(data_events[,m] <- as.Date(data_events[,m]))
                                                }
                                                
                                                #"Performance","Buy","Overweight","Hold",
                                                #"Underweight","Sell",
                                                
                                                data_events <<- rbind(data_events,new_row)
                                                colnames(data_events) <- c("Name","Symbol","Date","Adjusted","Buy", "Overweight", "Hold",
                                                                           "Underweight", "Sell",
                                                                           "Volume1", "Volume2", "Volume3", "Volume4",
                                                                           "Volume5", "Volume6", "Volume7", "Volume8",
                                                                           "Volume9", "Volume10", "Volume11", "Volume12",
                                                                           "Volume13", "Volume14", "Volume15", "Volume16",
                                                                           "Volume17", "Volume18", "Volume19", "Volume20", 
                                                                           "Volume21", "Volume22", "Volume23", "Volume24", 
                                                                           "Adjusted1", "Adjusted2", "Adjusted3", "Adjusted4",
                                                                           "Adjusted5", "Adjusted6", "Adjusted7", "Adjusted8",
                                                                           "Adjusted9", "Adjusted10", "Adjusted11", "Adjusted12",
                                                                           "Adjusted13", "Adjusted14", "Adjusted15", "Adjusted16",
                                                                           "Adjusted17", "Adjusted18", "Adjusted19", "Adjusted20", 
                                                                           "Adjusted21", "Adjusted22", "Adjusted23", "Adjusted24", 
                                                                           "AROON_UP7", "AROON_DOWN7","AROON_OSCILLITATOR7",
                                                                           "AROON_UP6", "AROON_DOWN6","AROON_OSCILLITATOR6",
                                                                           "AROON_UP5", "AROON_DOWN5","AROON_OSCILLITATOR5",
                                                                           "AROON_UP4", "AROON_DOWN4","AROON_OSCILLITATOR4",
                                                                           "AROON_UP3", "AROON_DOWN3","AROON_OSCILLITATOR3",
                                                                           "AROON_UP2", "AROON_DOWN2","AROON_OSCILLITATOR2",
                                                                           "AROON_UP1", "AROON_DOWN1","AROON_OSCILLITATOR1",
                                                                           "AROON_UP", "AROON_DOWN","AROON_OSCILLITATOR",
                                                                           "RSI7", "MACD7","MACD_Signal7",
                                                                           "RSI6", "MACD6","MACD_Signal6",
                                                                           "RSI5", "MACD5","MACD_Signal5",
                                                                           "RSI4", "MACD4","MACD_Signal4",
                                                                           "RSI3", "MACD3","MACD_Signal3",
                                                                           "RSI2", "MACD2","MACD_Signal2",
                                                                           "RSI1", "MACD1","MACD_Signal1",
                                                                           "RSI", "MACD","MACD_Signal")
                                                
                                                
                                                for(m in 1:ncol(data_events)){
                                                    if(m != 3){
                                                        data_events[,m] <- as.character(data_events[,m])
                                                    }
                                                    else(data_events[,m] <- as.Date(data_events[,m]))
                                                }
                                                
                                            }
                                        }
                                    }

                                    
                                    

                                    
                                    

                                    #current_performance, expert_opinions$Buy, expert_opinions$Overweight, expert_opinions$Hold,
                                    #expert_opinions$Underweight, expert_opinions$Sell,
                                    
                                    
                                #}
                                #}
                                
                            #}
                        } 
                    )  
                }


                data <- readxl::read_excel("data_events.xlsx")
                data_test <- data_events

                for(i in 4:(ncol(data_test))){
                    data_test[,i] <- as.numeric(unlist(data_test[,i]))
                }

                data_test$resultoneweek <- ifelse((data_test$Adjusted7 / data_test$Adjusted > 1), 1,0)
                data_test$resulttwoweek <- ifelse((data_test$Adjusted / data_test$Adjusted > 1), 1,0)
                data_test$resultoneeek <- data_test$Adjusted7 / data_test$Adjusted
                data_test$resulttwoweek <- data_test$Adjusted14 / data_test$Adjusted
                data_test <- data_test



                for(i in 4:(ncol(data_test)-1)){
                    data_test[,i] <- scale(data_test[,i])
                }

                ggplot(data= data_test, aes(x=AROON_OSCILLITATOR1, y=Adjusted              , col=resulttwoweek, alpha= 0.001)) + geom_jitter()

                mean(data_test$AROON_OSCILLITATOR1[data_test$resulttwoweek==1], na.rm=T)

                mean(data_test$resulttwoweek[(data_test$Hold > 11) & (data_test$Hold < 17)], na.rm = T)

                mean(data_test4$resultoneweek, na.rm = T)
                mean(data_test4$resulttwoweek, na.rm = T)

                #to validate
                data_test2 <- data_test[(data_test$Buy > 11),]
                data_test3 <- data_test[((data_test$Volume1 > 1000000) & (data_test$Volume1 < 4000000)),]
                data_test4 <- data_test[(data_test$RSI > 70),]
                data_test5 <- data_test[((data_test$AROON_OSCILLITATOR1 < 0) & (data_test$AROON_OSCILLITATOR1 > -40)),]
                data_test6 <- data_test[((data_test$Adjusted < 90) & (data_test$Adjusted > 30)),]


                data_test <- data_test2
                mean(data_test2$resulttwoweek, na.rm = T)
                mean(data_test3$resulttwoweek, na.rm = T)
                mean(data_test4$resulttwoweek, na.rm = T)#prom -> investigate
                mean(data_test5$resulttwoweek, na.rm = T)#prom
                mean(data_test6$resulttwoweek, na.rm = T)#prom -> investigate

                data_test <- data_test3
                mean(data_test2$resulttwoweek, na.rm = T)
                mean(data_test3$resulttwoweek, na.rm = T)
                mean(data_test4$resulttwoweek, na.rm = T)
                mean(data_test5$resulttwoweek, na.rm = T)#prom -> with 5 0.6
                mean(data_test6$resulttwoweek, na.rm = T)

                data_test <- data_test4
                mean(data_test2$resulttwoweek, na.rm = T)#prom
                mean(data_test3$resulttwoweek, na.rm = T)
                mean(data_test4$resulttwoweek, na.rm = T)
                mean(data_test5$resulttwoweek, na.rm = T)#prom -> 0.53
                mean(data_test6$resulttwoweek, na.rm = T)#prom with 3 & 4 -> 0.55

                data_test <- data_test5
                mean(data_test2$resulttwoweek, na.rm = T)#prom
                mean(data_test3$resulttwoweek, na.rm = T)#prom - 0.6
                mean(data_test4$resulttwoweek, na.rm = T)#prom
                mean(data_test5$resulttwoweek, na.rm = T)#prom
                mean(data_test6$resulttwoweek, na.rm = T)#prom -0.6

                data_test <- data_test6
                mean(data_test2$resulttwoweek, na.rm = T)#prom
                mean(data_test3$resulttwoweek, na.rm = T)#prom - 0.6
                mean(data_test4$resulttwoweek, na.rm = T)#prom
                mean(data_test5$resulttwoweek, na.rm = T)#prom
                mean(data_test6$resulttwoweek, na.rm = T)#prom -0.6




                print(mean(data_test$resulttwoweek[data_test$RSI < 70 & data_test$RSI > 60], na.rm=T))

                nrow(data_test2)

                data_train <- data_test[1:2000,]
                data_val <- data_test[2001:2200,]
                real <- data_val$resulttwoweek
                data_val <- data_val[,-ncol(data_val)]
                str(data_val)

                library(randomForest)
                library(dplyr)
                library(ggplot2)

                data_train <- data_train[,-c(1:3)]
                data_train <- data_train[,-c(31:54)]
                str(data_train)

                model <- randomForest(resulttwoweek ~ ., data=data_train, na.action=na.omit, ntree=500, proximity=T, importance=T)
                imp <- as.data.frame(importance(model))
                str(imp)
                imp %>% arrange(1)

                pred <- predict(model, data_val)

                data_indicator$BB_DOWN <- BBands(data_indicator$Adjusted)[,1]
                data_indicator$BB_AVG <- BBands(data_indicator$Adjusted)[,2]
                data_indicator$BB_UP <- BBands(data_indicator$Adjusted)[,3]
                names(data_indicator) <- c("Date", "Adjusted", "CCI", "AROON_UP", "AROON_DOWN","AROON_OSCILLITATOR", "BB_DOWN", "BB_AVG", "BB_UP")
                if(data_indicator$CCI[nrow(data_indicator)] >= data_indicator$CCI[nrow(data_indicator) - 14]){current_indicator_cci <- 1}
                else(current_indicator_cci <- 0)
                if((data_indicator$AROON_UP[nrow(data_indicator)] >= data_indicator$AROON_UP[nrow(data_indicator) - 5]) && data_indicator$AROON_UP[nrow(data_indicator)] >= 80){current_indicator_aroon <- 1}
                else(current_indicator_aroon <- 0)
                if(data_indicator$BB_AVG[nrow(data_indicator)] >= data_indicator$BB_AVG[nrow(data_indicator) - 7]){
                    if((abs(data_indicator$BB_DOWN[nrow(data_indicator) - 5] - data_indicator$BB_UP[nrow(data_indicator) - 5]) <=
                        abs(data_indicator$BB_DOWN[nrow(data_indicator) - 3] - data_indicator$BB_UP[nrow(data_indicator) - 3])) &&
                       (abs(data_indicator$BB_DOWN[nrow(data_indicator) - 3] - data_indicator$BB_UP[nrow(data_indicator) - 3]) <=
                        abs(data_indicator$BB_DOWN[nrow(data_indicator) - 1] - data_indicator$BB_UP[nrow(data_indicator) - 1])))
                    {current_indicator_bb <- 1}
                }
                else(current_indicator_bb <- 0)
                #joining data for recommentation table
                current_indicator <- sum(current_indicator_cci, current_indicator_aroon, current_indicator_bb)

                # switchCase(
                #     current_performance,
                #     alt(..expr <= 1,{current_performance <- 1}),
                #     alt(..expr > 1 & ..expr < 1.1,{current_performance <- 2}),
                #     alt(..expr > 1.1 & ..expr < 1.2,{current_performance <- 3}),
                #     alt(..expr > 1.2 & ..expr < 1.3,{current_performance <- 4}),
                #     alt(..expr > 1.3 & ..expr < 1.4,{current_performance <- 5}),
                #     alt(..expr > 1.4 & ..expr < 1.5,{current_performance <- 6}),
                #     alt(..expr > 1.5 & ..expr < 1.6,{current_performance <- 7}),
                #     alt(..expr > 1.6 & ..expr < 1.7,{current_performance <- 8}),
                #     alt(..expr > 1.7 & ..expr < 1.8,{current_performance <- 9}),
                #     alt(..expr > 1.8,{current_performance <- 10})
                # )

                # #stocks_recommendation <- rbind(stocks_recommendation, as.character(objects()[objects() %in% symbols_choice[k]]))
                # stocks_recommendation[,1] <- as.character(stocks_recommendation[,1])
                # stocks_recommendation[,2] <- as.character(stocks_recommendation[,2])
                # stocks_recommendation[,3] <- as.character(stocks_recommendation[,3])
                # stocks_recommendation[,4] <- as.character(stocks_recommendation[,4])
                # stocks_recommendation[,5] <- as.character(stocks_recommendation[,5])
                # stocks_recommendation[,6] <- as.character(stocks_recommendation[,6])
                # stocks_recommendation[,7] <- as.character(stocks_recommendation[,7])
                # sum_value <- sum(as.numeric(current_ensmble_fc), as.numeric(current_indicator), as.numeric(current_expert), as.numeric(current_performance))
                # current_row <- c(as.character(current_stock), as.character(current_symbol),as.character(current_ensmble_fc), as.character(current_indicator), as.character(current_expert), as.character(current_performance), as.character(sum_value))
                #
                # stocks_recommendation <- rbind(stocks_recommendation, current_row)
                
                names(stocks_recommendation) <- c("Stock","Symbol", "Forecast", "Indicator", "Expert Opinion", "Performance", "Total")
            })
            
            stocks_picked <- symbols_Nasdaq[symbols_Nasdaq$Symbol %in% objects(),]
            
        }
        output$recommendationOverview <- renderDataTable(stocks_recommendation,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
    })
    
}







# 
# 
# html_table(x, header = NA, trim = TRUE, fill = FALSE, dec = ".")
# 
# div:nth-child(3)
# 
# https://www.marketwatch.com/investing/stock/aacg/analystestimates?mod=mw_quote_analyst


#https://www.marketwatch.com/investing/stock/AAL
#https://www.cnbc.com/quotes/?symbol=aacg&qsearchterm=aacg

shinyApp(ui, server)