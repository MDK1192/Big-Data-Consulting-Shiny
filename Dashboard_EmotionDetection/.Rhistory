path_of_file[[1]]
path_of_file[[1]][2]
audio_path <- paste0("www/",path_of_file[[1]][2],"/audio")
audio_path
try(df_audio <- check_wav(audio_path))
try(df_audio <- check_wav(audio_path))
try(df_video <- check_img(video_path))
video_path <- paste0("www/",path_of_file[[1]][2],"/video")
try(df_video <- check_img(video_path))
runApp()
runApp()
audio_path
video_path
path_of_file[[1]][2]
path_of_file
runApp()
audio_path
video_path
runApp()
runApp()
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
py_install("librosa")
try(source_python("skript_wav_png_transform.py"))
PATH_TO_FILE = Path.cwd() / "ravdess" / "spectogram"/"audiodat"
reticulate::repl_python()
PATH_TO_FILE = Path.cwd() / "ravdess" / "spectogram"/"audiodat"
print(PATH_TO_FILE)
PATH_TO_FILE = Path.cwd() / "www" / "wav_transform"
PATH_TO_FILE
def precompute_spectrograms(path, dpi=50):
precompute_spectrograms(PATH_TO_RAVDESS)
def precompute_spectrograms(path, dpi=50):
files = Path(path).glob('*.wav')
for filename in files:
audio_tensor, sr = librosa.load(filename, sr=None)
spectrogram = librosa.feature.melspectrogram(audio_tensor, sr=sr)
log_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)
librosa.display.specshow(log_spectrogram, sr=sr, x_axis='time', y_axis='mel')
plt.gcf().savefig("{}{}_{}.png".format(filename.parent,dpi,filename.name), dpi=dpi)
precompute_spectrograms(PATH_TO_RAVDESS)
print(PATH_TO_FILE)
def precompute_spectrograms(path, dpi=50):
files = Path(path).glob('*.wav')
print(files)
for filename in files:
audio_tensor, sr = librosa.load(filename, sr=None)
spectrogram = librosa.feature.melspectrogram(audio_tensor, sr=sr)
log_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)
librosa.display.specshow(log_spectrogram, sr=sr, x_axis='time', y_axis='mel')
plt.gcf().savefig("{}{}_{}.png".format(filename.parent,dpi,filename.name), dpi=dpi)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms(PATH_TO_FILE)
precompute_spectrograms()
runApp()
runApp()
runApp()
df_files$Datei[input$FileTable_rows_selected]
path_of_file <- strsplit(as.character(df_files$Herkunft), "www/")
path_of_file <- strsplit(as.character(df_files$Herkunft), "www/")
path_of_file
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
path_selected <- paste0("data/",df_files$Datei[input$FileTable_rows_selected])
path_of_file <- strsplit(as.character(df_files$Herkunft), "www/")
path_of_file[[input$FileTable_rows_selected]][2]
path_of_file
runApp()
runApp()
runApp()
precompute_spectrograms()
runApp()
runApp()
runApp()
file
for(file in files){
file.remove(file)
}
file
file.remove(file)
file.remove(wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png)
file.remove("wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
file.remove("wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
unlink("wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
unlink("wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
unlink("www/wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
unlink("www/wav_transform/transformed_png/03-01-03-02-01-01-01.wav.png")
unlink("www/wav_transform/transformed_png/03-01-03-02-02-01-01.wav.png")
runApp()
path_of_file
file.remove(paste0("www/",path_of_file,file))
runApp()
runApp()
runApp()
runApp()
paste0("www/",path_of_file,file)
runApp()
paste0("www/",path_of_file,"/",file)
runApp()
runApp()
runApp()
path_selected
path_of_file <- strsplit(as.character(df_files$Herkunft), "www/")
path_of_file <- path_of_file[[1]][2]
files <- list.files(path_of_file)
path_of_file
files <- list.files(path_of_file)
files <- list.files(paste0("www/",path_of_file))
files
if(grepl("\\.wav$", file)){print(file)}
if(grepl("\\.wav$", file)){print(file)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
audio_path
video_path
runApp()
runApp()
!exists(df_audio)
runApp()
runApp()
if(!exists(df_audio))
!exists(df_audio)
exists(df_audio)
exists(df_audio)
exists(df_audio)
exists(iris)
!exists("df_audio")
df_video <- data.frame(c("file","classification","neutral","happy","sad","angry","fear","disgust","surprise","contempt")
df_video <- data.frame(c("file","classification","neutral","happy","sad","angry","fear","disgust","surprise","contempt"))
df_video <- data.frame(c("file","classification","neutral","happy","sad","angry","fear","disgust","surprise","contempt"))
View(df_video)
runApp()
View(df_video)
View(df_video)
View(df_video)
View(df_video)
if(!exists("df_video")){df_video <- data.frame(c("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character()))}
View(df_video)
if(!exists("df_audio")){df_audio <- data.frame("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character())}
if(!exists("df_video")){df_video <- data.frame("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character())}
View(df_video)
View(df_audio)
if(!exists("df_video")){df_video <- data.frame("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character())}
if(!exists("df_video")){df_video <- data.frame("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character())}
if(!exists("df_audio")){df_audio <- data.frame("file"=as.character(),"classification"=as.character(),"neutral"=as.character(),
"happy"=as.character(),"sad"=as.character(),"angry"=as.character()
,"fear"=as.character(),"disgust"=as.character(),"surprise"=as.character(),"contempt"=as.character())}
runApp()
runApp()
Emotions_Audio_Summary <- table(df_files)
table(df_files)
summary(df_files)
colSums(df_files)
runApp()
runApp()
colSums(df_audio)
summary(df_audio)
summary(df_audio$classification)
table(df_audio$classification)
View(df_files)
View(df_video)
View(df_audio)
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_audio)
table(df_audio)
table(df_audio$classification)
View(df_audio)
for(col in names(df_audio_table)){
print(col)
}
df_audio_table <- data.frame("neutral"=0,"happy"=0,"sad"=0,"angry"=0
,"fear"=0,"disgust"=0,"surprise"=0,"contempt"=0)
df_video_table <- data.frame("neutral"=0,"happy"=0,"sad"=0,"angry"=0
,"fear"=0,"disgust"=0,"surprise"=0,"contempt"=0)
df_audio_summary <- table(df_audio$classification)
df_video_summary <- table(df_video$classification)
df_audio_summary
df_video_summary
runApp()
df_audio_summary
for(col in names(df_audio_table)){
print(col)
}
df_audio_summary[col]
runApp()
runApp()
print(df_audio_summary[col])
for(col in names(df_audio_table)){
print(df_audio_summary[col])
}
for(col in names(df_audio_table)){
browser()
print(df_audio_summary[col])
}
runApp()
print(df_audio_summary[col])
df_audio_summary[col]
value(df_audio_summary[col])
col
names(df_audio_summary)
as.numeric(df_audio_summary)
as.numeric(df_audio_summary[col])
df_audio_table[col]
df_audio_table[col] <- as.numeric(df_audio_summary[col])
df_audio_table[col]
runApp()
runApp()
runApp()
View(df_audio_table)
View(df_audio_table)
View(df_video_table)
View(df_audio_table)
View(df_video_table)
View(df_audio_table)
View(df_audio)
View(df_audio_table)
runApp()
runApp()
View(df_files)
View(df_video)
View(df_video_table)
View(df_audio_table)
runApp()
runApp()
n
runApp()
runApp()
View(df_video_table)
View(df_audio_table)
View(df_audio_table)
View(df_video_table)
emotions_summary_df <- rbind(df_audio_table, df_video_table)
View(emotions_summary_df)
runApp()
View(df_audio_table)
names(df_audio_summary[col])
col %in% names(df_audio_summary[col])
View(df_audio_table)
View(df_audio_table)
View(df_audio_table)
names(df_video_summary[col])
names(df_video_summary)
names(df_video_summary[col])
for(col in names(df_video_table)){print(col)}
View(df_audio_table)
View(df_audio_table)
runApp()
View(df_audio_table)
names(df_audio_summary[col])
names(df_audio_summary)
runApp()
View(df_audio_table)
View(df_video_table)
View(df_audio_table)
View(df_video_table)
runApp()
View(df_audio_table)
View(df_video_table)
for(col in names(df_audio_table)){
print(col)
}
for(col in names(df_audio_table)){
if(col %in% names(df_audio_summary)){print(col)}}
for(col in names(df_audio_table)){
print(col)
}
col==names(df_audio_summary)
col==names(df_audio_summary[col])
for(col in names(df_audio_table)){
if(col==names(df_audio_summary[col])){
df_audio_table[col] <<- as.numeric(df_audio_summary[col])
}
}
View(df_audio_table)
View(df_video_table)
View(df_audio_table)
runApp()
names(df_audio_table)
for(col in names(df_audio_summary)){
if(col==names(df_audio_table)){
df_audio_table[col] <<- as.numeric(df_audio_summary[col])
}
}
View(df_audio_table)
runApp()
runApp()
View(df_audio_table)
View(df_video_table)
View(emotions_summary_df)
shiny::runApp()
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms()
try(source_python("skript_wav_png_transform.py"))
precompute_spectrograms()
observeEvent(input$transformButton, {
browser()
try(source_python("skript_wav_png_transform.py"))
path_of_file <- strsplit(as.character(df_files$Herkunft), "www/")
path_of_file <- path_of_file[[1]][2]
files <- list.files("www/wav_transform/audio")
for(file in files){
unlink(paste0("www/wav_transform/audio/",file))
}
files <- list.files("www/wav_transform/untransformed_wavs")
for(file in files){
unlink(paste0("www/wav_transform/untransformed_wavs/",file))
}
files <- list.files(paste0("www/",path_of_file))
for(file in files){
if(grepl("\\.wav$", file)){
file.copy(file, paste0("www/wav_transform/untransformed_wavs/",file))
}
}
precompute_spectrograms()
})
precompute_spectrograms()
precompute_spectrograms()
