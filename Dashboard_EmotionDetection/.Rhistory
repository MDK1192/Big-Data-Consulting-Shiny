shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
memory.limit(size = 250000)
memory.limit(size = 250000)
runApp()
runApp()
input$file
runApp()
input$file
runApp()
input$file
runApp()
file()
runApp()
insput$file
input$file
input$file$datapath
filepat <- input$file$datapath
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp('test')
runApp('test')
runApp('test')
library(shiny)
library(shinyFiles)
library(shinydashboard)
library(imager)
library(DT)
library(reticulate)
library(dplyr)
getwd()
s <- load.video("www/test.mp4")
ls()
s <- load.video("www/test2.mp4")
s <- load.video("www/Test2.mp4")
install.packages("ffmpeg")
install.packages("av")
av_video_images("www/Test2.mp4", format = "jpg", fps = NULL)
library(av)
av_video_images("www/Test2.mp4", format = "jpg", fps = NULL)
av_video_images("www/Test2.mp4", destdir = "www", format = "jpg", fps = NULL)
runApp()
runApp()
av_video_images("www/Test2.mp4", destdir = "images", format = "jpg", fps = NULL)
av_video_images("www/Testvideo.mp4", destdir = "images", format = "jpg", fps = NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unlink("images")
unlink("images")
unlink("images", recursive = T, force = T)
runApp()
runApp()
runApp('F:/Marc/Beruf/RStudio/projects/sd')
runApp('F:/Marc/Beruf/RStudio/projects/sd')
library(shiny)
library(shinyFiles)
runApp()
ls("images")
getwd()
ls()
dir()
list.files(path="model_input_images")
imgNames <- list.files(path="model_input_images")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
data
dat
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load.image(paste0("www/", imgName))
load.image(paste0("www/", imgName)
runApp()
png(file = paste0("www/", imgName))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# ----UI----
ui <- fluidPage(
titlePanel("Display two images for each row"),
mainPanel(
DTOutput("table"),
fluidRow(
column(6, plotOutput("img1")),
column(6, uiOutput("img2"))
)
)
)
runApp()
runApp()
runApp()
library(av)
runApp()
runApp()
shiny::runApp()
runApp()
imgNames = c(list.files("www"))
runApp()
runApp()
runApp()
runApp()
library(imager)
runApp()
runApp()
runApp()
png(file = as.character(paste0("www/", imgName)))
runApp()
png(file = as.character(paste0("www/", imgName)))
file = as.character(paste0("www/", imgName)
file = as.character(paste0("www/", imgName))
image <- load.image(file)
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
image <- load.image(file)
install.packages("magick")
runApp()
runApp()
png(file = as.character(paste0("www/", imgName)))
magick::image_read(file)
file = as.character(paste0("www/", imgName))
magick::image_read(file)
magick::image_read(file)
outfile <- tempfile(fileext='.png')
png(outfile)
image <- load.image(file)
shiny::runApp()
runApp()
runApp()
dir <- reactive(input$dir)
runApp()
runApp()
getwd()
file_path <- paste0(getwd(),"/www")
filepath
file_path
files <- list.files(path = file_path)
#set global_env variables
file_path <- paste0(getwd(),"/www/data")
files <- list.files(path = file_path)
runApp()
runApp()
runApp()
View(df_files)
runApp()
runApp()
View(df_files)
runApp()
runApp()
View(df_files)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$FileTable_rows_selected
str(input$FileTable_rows_selected)
file_selected <<- df_files[input$FileTable_rows_selected]
runApp()
View(file_selected)
runApp()
runApp()
file_selected
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected <- "data/03-01-01-01-02-01-01.wav"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyjs)
install.packages("shinyjs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('dfdf')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('dfdf')
runApp('dfdf')
runApp('dfdf')
runApp()
runApp()
runApp()
runApp()
runApp()
wav_name
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/Stock Recommendation Engine MK2')
runApp('~/Stock Recommendation Engine MK2')
data_sample <- read.csv2("data_sample.csv")
View(data_sample)
data_sample <- read.csv2("data_sample.csv", sep=",")
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
View(data_sample)
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- na.omit(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- data_sample[1190:2050,]
View(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
data_sample <- data_sample[1190:2030,]
View(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- data_sample[1190:1230,]
View(data_sample)
data_sample$Price <- 30
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
View(data_sample)
runApp()
runApp()
