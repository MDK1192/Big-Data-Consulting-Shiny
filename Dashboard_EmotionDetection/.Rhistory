runApp()
runApp()
runApp()
shiny::runApp('test')
runApp('test')
runApp('test')
library(shiny)
library(shinyFiles)
library(shinydashboard)
library(imager)
library(DT)
library(reticulate)
library(dplyr)
getwd()
s <- load.video("www/test.mp4")
ls()
s <- load.video("www/test2.mp4")
s <- load.video("www/Test2.mp4")
install.packages("ffmpeg")
install.packages("av")
av_video_images("www/Test2.mp4", format = "jpg", fps = NULL)
library(av)
av_video_images("www/Test2.mp4", format = "jpg", fps = NULL)
av_video_images("www/Test2.mp4", destdir = "www", format = "jpg", fps = NULL)
runApp()
runApp()
av_video_images("www/Test2.mp4", destdir = "images", format = "jpg", fps = NULL)
av_video_images("www/Testvideo.mp4", destdir = "images", format = "jpg", fps = NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unlink("images")
unlink("images")
unlink("images", recursive = T, force = T)
runApp()
runApp()
runApp('F:/Marc/Beruf/RStudio/projects/sd')
runApp('F:/Marc/Beruf/RStudio/projects/sd')
library(shiny)
library(shinyFiles)
runApp()
ls("images")
getwd()
ls()
dir()
list.files(path="model_input_images")
imgNames <- list.files(path="model_input_images")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
data
dat
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load.image(paste0("www/", imgName))
load.image(paste0("www/", imgName)
runApp()
png(file = paste0("www/", imgName))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# ----UI----
ui <- fluidPage(
titlePanel("Display two images for each row"),
mainPanel(
DTOutput("table"),
fluidRow(
column(6, plotOutput("img1")),
column(6, uiOutput("img2"))
)
)
)
runApp()
runApp()
runApp()
library(av)
runApp()
runApp()
shiny::runApp()
runApp()
imgNames = c(list.files("www"))
runApp()
runApp()
runApp()
runApp()
library(imager)
runApp()
runApp()
runApp()
png(file = as.character(paste0("www/", imgName)))
runApp()
png(file = as.character(paste0("www/", imgName)))
file = as.character(paste0("www/", imgName)
file = as.character(paste0("www/", imgName))
image <- load.image(file)
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
image <- load.image(file)
install.packages("magick")
runApp()
runApp()
png(file = as.character(paste0("www/", imgName)))
magick::image_read(file)
file = as.character(paste0("www/", imgName))
magick::image_read(file)
magick::image_read(file)
outfile <- tempfile(fileext='.png')
png(outfile)
image <- load.image(file)
shiny::runApp()
runApp()
runApp()
dir <- reactive(input$dir)
runApp()
runApp()
getwd()
file_path <- paste0(getwd(),"/www")
filepath
file_path
files <- list.files(path = file_path)
#set global_env variables
file_path <- paste0(getwd(),"/www/data")
files <- list.files(path = file_path)
runApp()
runApp()
runApp()
View(df_files)
runApp()
runApp()
View(df_files)
runApp()
runApp()
View(df_files)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$FileTable_rows_selected
str(input$FileTable_rows_selected)
file_selected <<- df_files[input$FileTable_rows_selected]
runApp()
View(file_selected)
runApp()
runApp()
file_selected
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file_selected <- "data/03-01-01-01-02-01-01.wav"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyjs)
install.packages("shinyjs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('dfdf')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('dfdf')
runApp('dfdf')
runApp('dfdf')
runApp()
runApp()
runApp()
runApp()
runApp()
wav_name
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/Stock Recommendation Engine MK2')
runApp('~/Stock Recommendation Engine MK2')
data_sample <- read.csv2("data_sample.csv")
View(data_sample)
data_sample <- read.csv2("data_sample.csv", sep=",")
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
View(data_sample)
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- na.omit(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- data_sample[1190:2050,]
View(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
data_sample <- data_sample[1190:2030,]
View(data_sample)
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
data_sample <- data_sample[,-1]
View(data_sample)
data_sample <- data_sample[1190:1230,]
View(data_sample)
data_sample$Price <- 30
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#sampledata for plot
data_sample <- read.csv2("data_sample.csv", sep=",")
View(data_sample)
runApp()
runApp()
shiny::runApp('tsf')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp('fgfg')
runApp()
runApp()
runApp()
imagename
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
View(data)
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#import python scripts
source_python("audio_extractor.py")
reticulate::conda_install("moviepy")
reticulate::conda_install("moviepy")
reticulate::py_install("moviepy")
reticulate::py_install("ffmpeg")
#import python scripts
source_python("audio_extractor.py")
#import python scripts
source_python("audio_extractor.py")
reticulate::repl_python()
print(os.listdir())
import os
import moviepy.editor as mp
os.environ["IMAGEIO_FFMPEG_EXE"] = "/usr/bin/ffmpeg"
import moviepy.editor as mp
print(os.listdir())
print(video_path)
video = mp.VideoFileClip("sample.mp4")
video = mp.VideoFileClip(r"sample.mp4")
print(os.listdir())
video = mp.VideoFileClip(r"C:/Users/Marc/Documents/GitHub/Big-Data-Consulting-Shiny/Dashboard_EmotionDetection/sample.mp4")
video = mp.VideoFileClip(r"~/sample.mp4")
video = mp.VideoFileClip(r"~/sample.mp4")
video = mp.VideoFileClip("~/sample.mp4")
getwd()
import os
os.environ["IMAGEIO_FFMPEG_EXE"] = "/usr/bin/ffmpeg"
import moviepy.editor as mp
video = mp.VideoFileClip("~/sample.mp4")
print(os.listdir())
quit
runApp()
transformator_function("\"sample.mp4\"")
transformator_function("sample.mp4")
runApp()
transformator_function("sample.mp4")
getwd()
transformator_function("C:/Users/Marc/Documents/GitHub/Big-Data-Consulting-Shiny/Dashboard_EmotionDetection/sample.mp4")
runApp()
transformator_function("C:/Users/Marc/Documents/GitHub/Big-Data-Consulting-Shiny/Dashboard_EmotionDetection/sample.mp4")
transformator_function("sample.mp4")
transformator_function("sample.mp4")
runApp()
transformator_function("sample.mp4")
runApp()
transformator_function("sample.mp4")
transformator_function("test.mp4")
runApp()
transformator_function("test.mp4")
transformator_function("test.mp4")
"C:\\abi\\youtubetogif_project\\a.mp4"
getwd()
"C:\\Users\\Marc\\DocumentsGitHub\\Big-Data-Consulting-Shiny\\Dashboard_EmotionDetection\\sample.mp4"
transformator_function("C:\\Users\\Marc\\DocumentsGitHub\\Big-Data-Consulting-Shiny\\Dashboard_EmotionDetection\\sample.mp4")
"C:\\Users\\Marc\\DocumentsGitHub\\Big-Data-Consulting-Shiny\\Dashboard_EmotionDetection\\sample.mp4"
library(reticulate)
mp <- import(moviepy.editor)
mp <- import moviepy.editor
mp <- import("moviepy.editor")
mp$AudioFileClip("sample.mp4")
getwd()
mp$AudioFileClip("C:/Users/Marc/Documents/GitHub/Big-Data-Consulting-Shiny/Dashboard_EmotionDetection/sample.mp4")
os <- import("os")
os$listdir
os$listdir()
os$path
os$pwd
#import python scripts
source_python("audio_extractor.py")
runApp()
transformator_function("sample.mp4")
#import python scripts
source_python("audio_extractor.py")
#import python scripts
source_python("audio_extractor.py")
transformator_function("\"sample.mp4\"")
transformator_function("sample.mp4")
reticulate::repl_python()
video = mp.VideoFileClip(video_path)
video = mp.VideoFileClip("sample.mp4")
video = mp.VideoFileClip("sample.mp4")
py_install("converter")
conda_install("converter")
reticulate::repl_python()
video = mp.VideoFileClip("sample.mp4")
from moviepy.editor import *
video = mp.VideoFileClip("sample.mp4")
import moviepy.editor as mp
video = mp.VideoFileClip("sample")
import ffmepg
import ffmpeg
py_install("ffmepg")
py_install("ffmpeg")
conda_install("ffmpeg")
conda_install("ffmpeg")
av_audio_convert('sample.mp4', 'sample10.wav', channels = 1, total_time = 10)
av_audio_convert('sample.mp4', 'sample10.wav', channels = 3, total_time = 10)
av_audio_convert('sample.mp4', 'sample10.wav', channels = 20, total_time = 10)
av_audio_convert('sample.mp4', 'sample10.wav', channels = NULL , total_time = 10)
av_audio_convert('sample.mp4', 'sample10.wav', channels = NULL , total_time = 10)
runApp()
runApp()
file_selected <- paste0("data/","current_video.wav")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
av_audio_convert(paste0("www/data/",df_files$Datei[input$FileTable_rows_selected]), 'www/data/current_video.wav', channels = NULL)
runApp()
av_audio_convert(paste0("www/data/",df_files$Datei[input$FileTable_rows_selected]), 'www/data/current_video.wav', channels = NULL)
av_audio_convert(paste0("sample.mp4", 'www/data/current_video.wav', channels = NULL)
av_audio_convert(paste0("sample.mp4", 'www/data/current_video.wav', channels = NULL)
av_audio_convert(paste0("sample.mp4", 'www/data/current_video.wav', channels = NULL))
av_audio_convert("sample.mp4", 'www/data/current_video.wav', channels = NULL))
av_audio_convert("sample.mp4", 'www/data/current_video.wav', channels = NULL)
runApp()
runApp()
runApp()
av_audio_convert("sample.mp4", 'www/data/current_video.wav', channels = NULL)
av_audio_convert("sample.mp4", 'current_video.wav', channels = NULL)
runApp()
runApp()
if (file.exists("www/data/current_video.wav"))
if(file.exists("www/data/current_video.wav")) {print("ja")}
runApp()
file.remove("www/data/current_video.wav")
unlink("www/data/current_video.wav")
unlink("www/data/current_video.wav")
unlink("www/data/current_video.wav",  force = TRUE)
file.remove("www/data/current_video.wav", force = TRUE)
file.copy("current_video.wav", "www/data/current_video.wav")
file.copy("current_video.wav", "www/data/current_video.wav")
runApp()
file.copy("current_video.wav", "www/data/current_video.wav")
fold <- 'www/data'
# get all files in the directories, recursively
f <- list.files(fold, include.dirs = F, full.names = T, recursive = T)
# remove the files
file.remove(f)
runApp()
#Define the file name that will be deleted
unlink("www/data/Temp_Current_Video", recursive=TRUE)
dir.create("www/data/Temp_Current_Video")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
